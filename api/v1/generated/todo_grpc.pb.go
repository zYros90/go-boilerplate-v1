// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: todo.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoSvcClient is the client API for TodoSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoSvcClient interface {
	Create(ctx context.Context, in *CreateTodoReq, opts ...grpc.CallOption) (*TodoResp, error)
	Update(ctx context.Context, in *CreateTodoReq, opts ...grpc.CallOption) (*TodoResp, error)
	Get(ctx context.Context, in *GetTodoReq, opts ...grpc.CallOption) (*TodoResp, error)
	Delete(ctx context.Context, in *DeleteTodoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type todoSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoSvcClient(cc grpc.ClientConnInterface) TodoSvcClient {
	return &todoSvcClient{cc}
}

func (c *todoSvcClient) Create(ctx context.Context, in *CreateTodoReq, opts ...grpc.CallOption) (*TodoResp, error) {
	out := new(TodoResp)
	err := c.cc.Invoke(ctx, "/api.user.v1.TodoSvc/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) Update(ctx context.Context, in *CreateTodoReq, opts ...grpc.CallOption) (*TodoResp, error) {
	out := new(TodoResp)
	err := c.cc.Invoke(ctx, "/api.user.v1.TodoSvc/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) Get(ctx context.Context, in *GetTodoReq, opts ...grpc.CallOption) (*TodoResp, error) {
	out := new(TodoResp)
	err := c.cc.Invoke(ctx, "/api.user.v1.TodoSvc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) Delete(ctx context.Context, in *DeleteTodoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.user.v1.TodoSvc/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoSvcServer is the server API for TodoSvc service.
// All implementations must embed UnimplementedTodoSvcServer
// for forward compatibility
type TodoSvcServer interface {
	Create(context.Context, *CreateTodoReq) (*TodoResp, error)
	Update(context.Context, *CreateTodoReq) (*TodoResp, error)
	Get(context.Context, *GetTodoReq) (*TodoResp, error)
	Delete(context.Context, *DeleteTodoReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedTodoSvcServer()
}

// UnimplementedTodoSvcServer must be embedded to have forward compatible implementations.
type UnimplementedTodoSvcServer struct {
}

func (UnimplementedTodoSvcServer) Create(context.Context, *CreateTodoReq) (*TodoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTodoSvcServer) Update(context.Context, *CreateTodoReq) (*TodoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTodoSvcServer) Get(context.Context, *GetTodoReq) (*TodoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTodoSvcServer) Delete(context.Context, *DeleteTodoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTodoSvcServer) mustEmbedUnimplementedTodoSvcServer() {}

// UnsafeTodoSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoSvcServer will
// result in compilation errors.
type UnsafeTodoSvcServer interface {
	mustEmbedUnimplementedTodoSvcServer()
}

func RegisterTodoSvcServer(s grpc.ServiceRegistrar, srv TodoSvcServer) {
	s.RegisterService(&TodoSvc_ServiceDesc, srv)
}

func _TodoSvc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.TodoSvc/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).Create(ctx, req.(*CreateTodoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.TodoSvc/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).Update(ctx, req.(*CreateTodoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.TodoSvc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).Get(ctx, req.(*GetTodoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.TodoSvc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).Delete(ctx, req.(*DeleteTodoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoSvc_ServiceDesc is the grpc.ServiceDesc for TodoSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.TodoSvc",
	HandlerType: (*TodoSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TodoSvc_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TodoSvc_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TodoSvc_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TodoSvc_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}
